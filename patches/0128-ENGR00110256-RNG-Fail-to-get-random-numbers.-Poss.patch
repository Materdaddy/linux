From 3217b4533e3e5c5bcd51ffda7396c9fec8f19c43 Mon Sep 17 00:00:00 2001
From: Raj Rajasekaran <b10872@freescale.com>
Date: Fri, 10 Apr 2009 14:27:14 -0500
Subject: [PATCH] ENGR00110256 - RNG: Fail to get random numbers. Possibility:100%

Added a new flag RNG_NO_FORCE_HIGH_ASSURANCE so RNG is not put
into high assurance mode.

Signed-off-by: Raj Rajasekaran <b10872@freescale.com>
---
 drivers/mxc/security/rng/include/rng_internals.h |   14 ++++++++++++++
 1 files changed, 14 insertions(+), 0 deletions(-)

diff --git a/drivers/mxc/security/rng/include/rng_internals.h b/drivers/mxc/security/rng/include/rng_internals.h
index 0843d90..62d195b 100644
--- a/drivers/mxc/security/rng/include/rng_internals.h
+++ b/drivers/mxc/security/rng/include/rng_internals.h
@@ -144,6 +144,20 @@
 #endif				/* end DOXYGEN_HACK */
 
 /*!
+ * If this flag is defined, the driver will not attempt to put the RNG into
+ * High Assurance mode.
+
+ * If it is undefined, the driver will attempt to put the RNG into High
+ * Assurance mode.  If RNG fails to go into High Assurance mode, the driver
+ * will fail to initialize.
+
+ * In either case, if the RNG is already in this mode, the driver will operate
+ * normally.
+ *
+ */
+#define RNG_NO_FORCE_HIGH_ASSURANCE
+
+/*!
  * Read a 32-bit value from an RNG register.  This macro depends upon
  * #rng_base.  The os_read32() macro operates on 32-bit quantities, as do
  * all RNG register reads.
-- 
1.5.4.4

