From b5f47e273be00c46efcc8d51523af0352815c6f5 Mon Sep 17 00:00:00 2001
From: Albert Chen <R65187@freescale.com>
Date: Thu, 19 Feb 2009 09:44:08 +0800
Subject: [PATCH] ENGR00107483: [MX37] failed to test our MSC driver with USBCV 1.3.

  can't pass msc class driver test with usbcv.
  set_bulk_out_req_length should set 512, not 31.

Signed-off-by: Albert Chen <r65187@freescale.com>
(cherry picked from commit 921bee65844be997082ab00820b6ee2b0d26c9f9)
---
 drivers/usb/gadget/arcotg_udc.c   |   99 +++++++++---------------------------
 drivers/usb/gadget/arcotg_udc.h   |    2 +-
 drivers/usb/gadget/file_storage.c |    2 -
 3 files changed, 26 insertions(+), 77 deletions(-)

diff --git a/drivers/usb/gadget/arcotg_udc.c b/drivers/usb/gadget/arcotg_udc.c
index 2a5d78f..bb8f761 100644
--- a/drivers/usb/gadget/arcotg_udc.c
+++ b/drivers/usb/gadget/arcotg_udc.c
@@ -908,8 +908,8 @@ fsl_ep_queue(struct usb_ep *_ep, struct usb_request *_req, gfp_t gfp_flags)
 	int is_iso = 0;
 
 	/* catch various bogus parameters */
-	if (!_req || !req->req.complete || !req->req.buf
-			|| !list_empty(&req->queue)) {
+	if (!_req || !req->req.buf || (ep_index(ep)
+				      && !list_empty(&req->queue))) {
 		VDBG("%s, bad params\n", __func__);
 		return -EINVAL;
 	}
@@ -964,10 +964,6 @@ fsl_ep_queue(struct usb_ep *_ep, struct usb_request *_req, gfp_t gfp_flags)
 		return -ENOMEM;
 	}
 
-	/* Update ep0 state */
-	if ((ep_index(ep) == 0))
-		udc->ep0_state = DATA_STATE_XMIT;
-
 	/* irq handler advances the queue */
 	if (req != NULL)
 		list_add_tail(&req->queue, &ep->queue);
@@ -1097,7 +1093,6 @@ static int fsl_ep_set_halt(struct usb_ep *_ep, int value)
 	spin_unlock_irqrestore(&ep->udc->lock, flags);
 
 	if (ep_index(ep) == 0) {
-		udc->ep0_state = WAIT_FOR_SETUP;
 		udc->ep0_dir = 0;
 	}
 out:
@@ -1309,7 +1304,6 @@ static void ep0stall(struct fsl_udc *udc)
 	tmp = fsl_readl(&dr_regs->endptctrl[0]);
 	tmp |= EPCTRL_TX_EP_STALL | EPCTRL_RX_EP_STALL;
 	fsl_writel(tmp, &dr_regs->endptctrl[0]);
-	udc->ep0_state = WAIT_FOR_SETUP;
 	udc->ep0_dir = 0;
 }
 
@@ -1324,26 +1318,10 @@ static int ep0_prime_status(struct fsl_udc *udc, int direction)
 		udc->ep0_dir = USB_DIR_IN;
 	else
 		udc->ep0_dir = USB_DIR_OUT;
-
 	ep = &udc->eps[0];
-	udc->ep0_state = WAIT_FOR_OUT_STATUS;
-
 	req->ep = ep;
 	req->req.length = 0;
-	req->req.status = -EINPROGRESS;
-	req->req.actual = 0;
-	req->req.complete = NULL;
-	req->dtd_count = 0;
-
-	if (fsl_req_to_dtd(req) == 0)
-		status = fsl_queue_td(ep, req);
-	else
-		return -ENOMEM;
-
-	if (status)
-		ERR("Can't queue ep0 status request \n");
-	list_add_tail(&req->queue, &ep->queue);
-
+	status = fsl_ep_queue(&ep->ep, &req->req, GFP_ATOMIC);
 	return status;
 }
 
@@ -1409,29 +1387,20 @@ static void ch9getstatus(struct fsl_udc *udc, u8 request_type, u16 value,
 	}
 
 	udc->ep0_dir = USB_DIR_IN;
-	/* Borrow the per device status_req */
-	req = udc->status_req;
+	/* Borrow the per device data_req */
+	/* status_req had been used to prime status */
+	req = udc->data_req;
 	/* Fill in the reqest structure */
 	*((u16 *) req->req.buf) = cpu_to_le16(tmp);
 	req->ep = ep;
 	req->req.length = 2;
-	req->req.status = -EINPROGRESS;
-	req->req.actual = 0;
-	req->req.complete = NULL;
-	req->dtd_count = 0;
-
-	/* prime the data phase */
-	if ((fsl_req_to_dtd(req) == 0))
-		status = fsl_queue_td(ep, req);
-	else			/* no mem */
-		goto stall;
 
+	status = fsl_ep_queue(&ep->ep, &req->req, GFP_ATOMIC);
 	if (status) {
+		udc_reset_ep_queue(udc, 0);
 		ERR("Can't respond to getstatus request \n");
 		goto stall;
 	}
-	list_add_tail(&req->queue, &ep->queue);
-	udc->ep0_state = DATA_STATE_XMIT;
 	return;
 stall:
 	ep0stall(udc);
@@ -1445,7 +1414,10 @@ static void setup_received_irq(struct fsl_udc *udc,
 	u16 wLength = le16_to_cpu(setup->wLength);
 
 	udc_reset_ep_queue(udc, 0);
-
+	if (setup->bRequestType & USB_DIR_IN) {
+		if (ep0_prime_status(udc, EP_DIR_OUT))
+			ep0stall(udc);
+	}
 	/* We process some stardard setup requests here */
 	switch (setup->bRequest) {
 	case USB_REQ_GET_STATUS:
@@ -1536,11 +1508,11 @@ static void setup_received_irq(struct fsl_udc *udc,
 				?  USB_DIR_IN : USB_DIR_OUT;
 		spin_unlock(&udc->lock);
 		if (udc->driver->setup(&udc->gadget,
-				&udc->local_setup_buff) < 0)
+				&udc->local_setup_buff) < 0) {
+			/* cancel status phase */
+			udc_reset_ep_queue(udc, 0);
 			ep0stall(udc);
-		spin_lock(&udc->lock);
-		udc->ep0_state = (setup->bRequestType & USB_DIR_IN)
-				?  DATA_STATE_XMIT : DATA_STATE_RECV;
+		}
 	} else {
 		/* No data phase, IN status from gadget */
 		udc->ep0_dir = USB_DIR_IN;
@@ -1548,9 +1520,8 @@ static void setup_received_irq(struct fsl_udc *udc,
 		if (udc->driver->setup(&udc->gadget,
 				&udc->local_setup_buff) < 0)
 			ep0stall(udc);
-		spin_lock(&udc->lock);
-		udc->ep0_state = WAIT_FOR_OUT_STATUS;
 	}
+	spin_lock(&udc->lock);
 }
 
 /* Process request for Data or Status phase of ep0
@@ -1564,30 +1535,7 @@ static void ep0_req_complete(struct fsl_udc *udc, struct fsl_ep *ep0,
 		fsl_writel(new_address << USB_DEVICE_ADDRESS_BIT_POS,
 				&dr_regs->deviceaddr);
 	}
-
 	done(ep0, req, 0);
-
-	switch (udc->ep0_state) {
-	case DATA_STATE_XMIT:
-		/* receive status phase */
-		if (ep0_prime_status(udc, EP_DIR_OUT))
-			ep0stall(udc);
-		break;
-	case DATA_STATE_RECV:
-		/* send status phase */
-		if (ep0_prime_status(udc, EP_DIR_IN))
-			ep0stall(udc);
-		break;
-	case WAIT_FOR_OUT_STATUS:
-		udc->ep0_state = WAIT_FOR_SETUP;
-		break;
-	case WAIT_FOR_SETUP:
-		ERR("Unexpect ep0 packets \n");
-		break;
-	default:
-		ep0stall(udc);
-		break;
-	}
 }
 
 /* Tripwire mechanism to ensure a setup packet payload is extracted without
@@ -1925,7 +1873,6 @@ static void reset_irq(struct fsl_udc *udc)
 	/* Clear usb state */
 	udc->resume_state = 0;
 	udc->ep0_dir = 0;
-	udc->ep0_state = WAIT_FOR_SETUP;
 	udc->remote_wakeup = 0;	/* default to 0 on reset */
 	udc->gadget.b_hnp_enable = 0;
 	udc->gadget.a_hnp_support = 0;
@@ -2106,7 +2053,6 @@ int usb_gadget_register_driver(struct usb_gadget_driver *driver)
 		/* Enable DR IRQ reg and Set usbcmd reg  Run bit */
 		dr_controller_run(udc_controller);
 		udc_controller->usb_state = USB_STATE_ATTACHED;
-		udc_controller->ep0_state = WAIT_FOR_SETUP;
 		udc_controller->ep0_dir = 0;
 	}
 	printk(KERN_INFO "%s: bind to driver %s \n",
@@ -2139,7 +2085,6 @@ int usb_gadget_unregister_driver(struct usb_gadget_driver *driver)
 
 	/* in fact, no needed */
 	udc_controller->usb_state = USB_STATE_ATTACHED;
-	udc_controller->ep0_state = WAIT_FOR_SETUP;
 	udc_controller->ep0_dir = 0;
 
 	/* stand operation */
@@ -2489,9 +2434,14 @@ static int __init struct_udc_setup(struct fsl_udc *udc,
 	/* FIXME: fsl_alloc_request() ignores ep argument */
 	udc->status_req = container_of(fsl_alloc_request(NULL, GFP_KERNEL),
 			struct fsl_req, req);
-	/* allocate a small amount of memory to get valid address */
+	/* for future use */
 	udc->status_req->req.buf = kmalloc(8, GFP_KERNEL);
 	udc->status_req->req.dma = virt_to_phys(udc->status_req->req.buf);
+	/* Initialize ep0 data request structure */
+	udc->data_req = container_of(fsl_alloc_request(NULL, GFP_KERNEL),
+			struct fsl_req, req);
+	udc->data_req->req.buf = kmalloc(8, GFP_KERNEL);
+	udc->data_req->req.dma = virt_to_phys(udc->data_req->req.buf);
 
 	udc->resume_state = USB_STATE_NOTATTACHED;
 	udc->usb_state = USB_STATE_POWERED;
@@ -2749,6 +2699,8 @@ static int __exit fsl_udc_remove(struct platform_device *pdev)
 	/* Free allocated memory */
 	kfree(udc_controller->status_req->req.buf);
 	kfree(udc_controller->status_req);
+	kfree(udc_controller->data_req->req.buf);
+	kfree(udc_controller->data_req);
 	kfree(udc_controller->eps);
 
 	dma_pool_destroy(udc_controller->td_pool);
@@ -2843,7 +2795,6 @@ static int fsl_udc_resume(struct platform_device *pdev)
 		dr_controller_run(udc_controller);
 	}
 	udc_controller->usb_state = USB_STATE_ATTACHED;
-	udc_controller->ep0_state = WAIT_FOR_SETUP;
 	udc_controller->ep0_dir = 0;
 
 	printk(KERN_INFO "USB Gadget resumed\n");
diff --git a/drivers/usb/gadget/arcotg_udc.h b/drivers/usb/gadget/arcotg_udc.h
index aa57bd8..aa5e6e7 100644
--- a/drivers/usb/gadget/arcotg_udc.h
+++ b/drivers/usb/gadget/arcotg_udc.h
@@ -560,6 +560,7 @@ struct fsl_udc {
 
 	struct ep_queue_head *ep_qh;	/* Endpoints Queue-Head */
 	struct fsl_req *status_req;	/* ep0 status request */
+	struct fsl_req *data_req;	/* ep0 data request */
 	struct dma_pool *td_pool;	/* dma pool for DTD */
 	enum fsl_usb2_phy_modes phy_mode;
 
@@ -572,7 +573,6 @@ struct fsl_udc {
 	u32 resume_state;	/* USB state to resume */
 	u32 usb_state;		/* USB current state */
 	u32 usb_next_state;	/* USB next state */
-	u32 ep0_state;		/* Endpoint zero state */
 	u32 ep0_dir;		/* Endpoint zero direction: can be
 				   USB_DIR_IN or USB_DIR_OUT */
 	u32 usb_sof_count;	/* SOF count */
diff --git a/drivers/usb/gadget/file_storage.c b/drivers/usb/gadget/file_storage.c
index d77ad4a..c4e62a6 100644
--- a/drivers/usb/gadget/file_storage.c
+++ b/drivers/usb/gadget/file_storage.c
@@ -712,8 +712,6 @@ static void set_bulk_out_req_length(struct fsg_dev *fsg,
 	if (rem > 0)
 		length += fsg->bulk_out_maxpacket - rem;
 	bh->outreq->length = length;
-	if (bh->bulk_out_intended_length == 31)
-		bh->outreq->length = 31;
 }
 
 static struct fsg_dev			*the_fsg;
-- 
1.5.4.4

