From bbfcc347f58abd76c67036b75cf5c66ed6305f79 Mon Sep 17 00:00:00 2001
From: Rob Herring <r.herring@freescale.com>
Date: Wed, 25 Feb 2009 10:37:33 -0600
Subject: [PATCH] ENGR00108529 mxcfb: rework lcd interface definitions

-Add support for custom fb memory allocations
-update custom FB_SYNC defines. redefine them so most panels
don't need them. They cause problems for X server init.
-Add platform_data to specify the lcd interface pixel format.

Signed-off-by: Rob Herring <r.herring@freescale.com>
---
 arch/arm/plat-mxc/include/mach/mxc.h |    6 ++
 drivers/video/mxc/ch7024.c           |    6 +-
 drivers/video/mxc/mx2fb.c            |    4 +-
 drivers/video/mxc/mxc_ipuv3_fb.c     |  158 +++++++++++-----------------------
 drivers/video/mxc/mxcfb.c            |    4 +-
 drivers/video/mxc/mxcfb_claa_wvga.c  |    2 +-
 drivers/video/mxc/mxcfb_epson_vga.c  |    2 +-
 drivers/video/mxc/mxcfb_modedb.c     |    8 +-
 drivers/video/mxc/tve.c              |    6 +-
 include/linux/mxcfb.h                |    4 +-
 10 files changed, 76 insertions(+), 124 deletions(-)

diff --git a/arch/arm/plat-mxc/include/mach/mxc.h b/arch/arm/plat-mxc/include/mach/mxc.h
index 3dcc79d..3755340 100644
--- a/arch/arm/plat-mxc/include/mach/mxc.h
+++ b/arch/arm/plat-mxc/include/mach/mxc.h
@@ -128,9 +128,15 @@ struct mxc_lightsensor_platform_data {
 	int rext;
 };
 
+struct mxc_fb_platform_data {
+	struct fb_videomode *mode;
+	u32 interface_pix_fmt;
+};
+
 struct mxc_lcd_platform_data {
 	char *io_reg;
 	char *core_reg;
+	char *analog_reg;
 	void (*reset) (void);
 };
 
diff --git a/drivers/video/mxc/ch7024.c b/drivers/video/mxc/ch7024.c
index 924e499..71ef82c 100644
--- a/drivers/video/mxc/ch7024.c
+++ b/drivers/video/mxc/ch7024.c
@@ -67,6 +67,7 @@
 #define CH7024_IN_TIMING10	0x1A
 #define CH7024_IN_TIMING11	0x1B
 #define CH7024_ACIV		0x1C
+#define CH7024_CLK_TREE		0x1D
 #define CH7024_OUT_TIMING1	0x1E
 #define CH7024_OUT_TIMING2	0x1F
 #define CH7024_V_POS1		0x20
@@ -227,7 +228,7 @@ static struct fb_videomode video_modes[] = {
 	 0, 101,
 	 0, 54,
 	 60, 20,
-	 FB_SYNC_HOR_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT | FB_SYNC_OE_ACT_HIGH,
+	 FB_SYNC_HOR_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT,
 	 FB_VMODE_NONINTERLACED,
 	 0,},
 	{
@@ -236,7 +237,7 @@ static struct fb_videomode video_modes[] = {
 	 0, 250,
 	 0, 40,
 	 60, 40,
-	 FB_SYNC_HOR_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT | FB_SYNC_OE_ACT_HIGH,
+	 FB_SYNC_HOR_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT,
 	 FB_VMODE_NONINTERLACED,
 	 0,},
 };
@@ -280,6 +281,7 @@ static int ch7024_setup(int vos)
 	ch7024_write_reg(CH7024_SYNC, 0x0D);	/* SLAVE mode, and TTL */
 	ch7024_write_reg(CH7024_IDF1, 0x00);
 	ch7024_write_reg(CH7024_TVFILTER1, 0x00);	/* set XCH=0 */
+	ch7024_write_reg(CH7024_CLK_TREE, 0x9E);	/* Invert input clk */
 
 	/* set input clock and divider */
 	/* set PLL */
diff --git a/drivers/video/mxc/mx2fb.c b/drivers/video/mxc/mx2fb.c
index 35e7e96..3cda6d5 100644
--- a/drivers/video/mxc/mx2fb.c
+++ b/drivers/video/mxc/mx2fb.c
@@ -1052,10 +1052,10 @@ static void _update_lcdc(struct fb_info *info)
 
 	/* Panel configuration register */
 	pcr = 0xFA008B80 | pcd;
-	pcr |= (var->sync & FB_SYNC_CLK_INVERT) ? 0 : 0x00200000;
+	pcr |= (var->sync & FB_SYNC_CLK_LAT_FALL) ? 0x00200000 : 0;
 	pcr |= (var->sync & FB_SYNC_DATA_INVERT) ? 0x01000000 : 0;
 	pcr |= (var->sync & FB_SYNC_SHARP_MODE) ? 0x00000040 : 0;
-	pcr |= (var->sync & FB_SYNC_OE_ACT_HIGH) ? 0 : 0x00100000;
+	pcr |= (var->sync & FB_SYNC_OE_LOW_ACT) ? 0x00100000 : 0;
 	__raw_writel(pcr, LCDC_REG(LCDC_LPCR));
 
 	/* Horizontal and vertical configuration register */
diff --git a/drivers/video/mxc/mxc_ipuv3_fb.c b/drivers/video/mxc/mxc_ipuv3_fb.c
index 42a7400..55911d8 100644
--- a/drivers/video/mxc/mxc_ipuv3_fb.c
+++ b/drivers/video/mxc/mxc_ipuv3_fb.c
@@ -59,6 +59,7 @@ struct mxcfb_info {
 	int blank;
 	ipu_channel_t ipu_ch;
 	int ipu_di;
+	u32 ipu_di_pix_fmt;
 	bool overlay;
 	uint32_t ipu_ch_irq;
 	uint32_t cur_ipu_buf;
@@ -78,9 +79,7 @@ struct mxcfb_alloc_list {
 
 static char *fb_mode;
 static unsigned long default_bpp = 16;
-#ifdef CONFIG_FB_MXC_INTERNAL_MEM
-static struct clk *iram_clk;
-#endif
+static bool g_dp_in_use;
 LIST_HEAD(fb_alloc_list);
 
 static uint32_t bpp_to_pixfmt(struct fb_info *fbi)
@@ -106,7 +105,7 @@ static uint32_t bpp_to_pixfmt(struct fb_info *fbi)
 
 static irqreturn_t mxcfb_irq_handler(int irq, void *dev_id);
 static int mxcfb_blank(int blank, struct fb_info *info);
-static int mxcfb_map_video_memory(struct fb_info *fbi, bool use_internal_ram);
+static int mxcfb_map_video_memory(struct fb_info *fbi);
 static int mxcfb_unmap_video_memory(struct fb_info *fbi);
 
 /*
@@ -138,7 +137,6 @@ static int mxcfb_set_fix(struct fb_info *info)
 static int mxcfb_set_par(struct fb_info *fbi)
 {
 	int retval;
-	bool use_iram = false;
 	u32 mem_len;
 	ipu_di_signal_cfg_t sig_cfg;
 	ipu_channel_params_t params;
@@ -153,15 +151,11 @@ static int mxcfb_set_par(struct fb_info *fbi)
 	mxcfb_set_fix(fbi);
 
 	mem_len = fbi->var.yres_virtual * fbi->fix.line_length;
-	if (mem_len > fbi->fix.smem_len) {
+	if (!fbi->fix.smem_start || (mem_len > fbi->fix.smem_len)) {
 		if (fbi->fix.smem_start)
 			mxcfb_unmap_video_memory(fbi);
 
-#ifdef CONFIG_FB_MXC_INTERNAL_MEM
-		if (mxc_fbi->ipu_ch == MEM_BG_SYNC)
-			use_iram = true;
-#endif
-		if (mxcfb_map_video_memory(fbi, use_iram) < 0)
+		if (mxcfb_map_video_memory(fbi) < 0)
 			return -ENOMEM;
 	}
 #ifdef CONFIG_MXC_IPU_V1
@@ -175,7 +169,10 @@ static int mxcfb_set_par(struct fb_info *fbi)
 		params.mem_dp_bg_sync.interlaced = true;
 		params.mem_dp_bg_sync.out_pixel_fmt = IPU_PIX_FMT_YUV444;
 	} else {
-		params.mem_dp_bg_sync.out_pixel_fmt = IPU_PIX_FMT_RGB666;
+		if (mxc_fbi->ipu_di_pix_fmt)
+			params.mem_dp_bg_sync.out_pixel_fmt = mxc_fbi->ipu_di_pix_fmt;
+		else
+			params.mem_dp_bg_sync.out_pixel_fmt = IPU_PIX_FMT_RGB666;
 	}
 	params.mem_dp_bg_sync.in_pixel_fmt = bpp_to_pixfmt(fbi);
 	ipu_init_channel(mxc_fbi->ipu_ch, &params);
@@ -193,11 +190,11 @@ static int mxcfb_set_par(struct fb_info *fbi)
 			sig_cfg.Hsync_pol = true;
 		if (fbi->var.sync & FB_SYNC_VERT_HIGH_ACT)
 			sig_cfg.Vsync_pol = true;
-		if (fbi->var.sync & FB_SYNC_CLK_INVERT)
+		if (!(fbi->var.sync & FB_SYNC_CLK_LAT_FALL))
 			sig_cfg.clk_pol = true;
 		if (fbi->var.sync & FB_SYNC_DATA_INVERT)
 			sig_cfg.data_pol = true;
-		if (fbi->var.sync & FB_SYNC_OE_ACT_HIGH)
+		if (!(fbi->var.sync & FB_SYNC_OE_LOW_ACT))
 			sig_cfg.enable_pol = true;
 		if (fbi->var.sync & FB_SYNC_CLK_IDLE_EN)
 			sig_cfg.clkidle_en = true;
@@ -285,22 +282,10 @@ static int mxcfb_check_var(struct fb_var_screeninfo *var, struct fb_info *info)
 	if (var->yres_virtual < var->yres)
 		var->yres_virtual = var->yres;
 
-#ifdef CONFIG_FB_MXC_INTERNAL_MEM
-	if ((info->fix.smem_start == FB_RAM_BASE_ADDR) &&
-	    ((var->yres_virtual * var->xres_virtual * var->bits_per_pixel / 8) >
-	     FB_RAM_SIZE))
-		return -EINVAL;
-#endif
-
 	if ((var->bits_per_pixel != 32) && (var->bits_per_pixel != 24) &&
 	    (var->bits_per_pixel != 16))
 		var->bits_per_pixel = default_bpp;
 
-	if (mxc_fbi->ipu_ch == MEM_DC_SYNC && mxc_fbi->ipu_di == 1) {
-		var->bits_per_pixel = 16;
-		var->nonstd = IPU_PIX_FMT_UYVY;
-	}
-
 	switch (var->bits_per_pixel) {
 	case 16:
 		var->red.length = 5;
@@ -695,9 +680,8 @@ static int mxcfb_mmap(struct fb_info *fbi, struct vm_area_struct *vma)
 	if (vma->vm_end - vma->vm_start > len)
 		return -EINVAL;
 
-	/* make buffers write-thru cacheable */
-	vma->vm_page_prot = __pgprot(pgprot_val(vma->vm_page_prot) &
-				     ~L_PTE_BUFFERABLE);
+	/* make buffers bufferable */
+	vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
 
 	vma->vm_flags |= VM_IO | VM_RESERVED;
 
@@ -793,64 +777,23 @@ static int mxcfb_resume(struct platform_device *pdev)
  *
  * @param       fbi     framebuffer information pointer
  *
- * @param       use_internal_ram flag on whether to use internal RAM for memory
- *
  * @return      Error code indicating success or failure
  */
-static int mxcfb_map_video_memory(struct fb_info *fbi, bool use_internal_ram)
+static int mxcfb_map_video_memory(struct fb_info *fbi)
 {
-	int retval = 0;
-
-#ifdef CONFIG_FB_MXC_INTERNAL_MEM
-	if (use_internal_ram) {
-		fbi->fix.smem_len = FB_RAM_SIZE;
-		fbi->fix.smem_start = FB_RAM_BASE_ADDR;
-		if (fbi->fix.smem_len <
-		    (fbi->var.yres_virtual * fbi->fix.line_length)) {
-			dev_err(fbi->device,
-				"Not enough internal RAM for fb config\n");
-			retval = -EINVAL;
-			goto err0;
-		}
-
-		if (request_mem_region(fbi->fix.smem_start, fbi->fix.smem_len,
-				       fbi->device->driver->name) == NULL) {
-			dev_err(fbi->device,
-				"Unable to request internal RAM\n");
-			retval = -ENOMEM;
-			goto err0;
-		}
-
-		fbi->screen_base = ioremap(fbi->fix.smem_start,
-					   fbi->fix.smem_len);
-		if (!fbi->screen_base) {
-			dev_err(fbi->device,
-				"Unable to map fb memory to virtual address\n");
-			release_mem_region(fbi->fix.smem_start,
-					   fbi->fix.smem_len);
-			retval = -EIO;
-			goto err0;
-		}
-
-		iram_clk = clk_get(NULL, "iram_clk");
-		clk_enable(iram_clk);
-	} else
-#endif
-	{
+	if (fbi->fix.smem_len < fbi->var.yres_virtual * fbi->fix.line_length)
 		fbi->fix.smem_len = fbi->var.yres_virtual *
-		    fbi->fix.line_length;
-		fbi->screen_base =
-		    dma_alloc_writecombine(fbi->device,
-					   fbi->fix.smem_len,
-					   (dma_addr_t *) &fbi->fix.smem_start,
-					   GFP_DMA);
-
-		if (fbi->screen_base == 0) {
-			dev_err(fbi->device,
-				"Unable to allocate framebuffer memory\n");
-			retval = -EBUSY;
-			goto err0;
-		}
+				    fbi->fix.line_length;
+
+	fbi->screen_base = dma_alloc_writecombine(fbi->device,
+				fbi->fix.smem_len,
+				(dma_addr_t *)&fbi->fix.smem_start,
+				GFP_DMA);
+	if (fbi->screen_base == 0) {
+		dev_err(fbi->device, "Unable to allocate framebuffer memory\n");
+		fbi->fix.smem_len = 0;
+		fbi->fix.smem_start = 0;
+		return -EBUSY;
 	}
 
 	dev_dbg(fbi->device, "allocated fb @ paddr=0x%08X, size=%d.\n",
@@ -862,12 +805,6 @@ static int mxcfb_map_video_memory(struct fb_info *fbi, bool use_internal_ram)
 	memset((char *)fbi->screen_base, 0, fbi->fix.smem_len);
 
 	return 0;
-
-err0:
-	fbi->fix.smem_len = 0;
-	fbi->fix.smem_start = 0;
-	fbi->screen_base = NULL;
-	return retval;
 }
 
 /*!
@@ -879,19 +816,8 @@ err0:
  */
 static int mxcfb_unmap_video_memory(struct fb_info *fbi)
 {
-#ifdef CONFIG_FB_MXC_INTERNAL_MEM
-	if (fbi->fix.smem_start == FB_RAM_BASE_ADDR) {
-		iounmap(fbi->screen_base);
-		release_mem_region(fbi->fix.smem_start, fbi->fix.smem_len);
-		fbi->fix.smem_start = 0;
-		fbi->fix.smem_len = 0;
-		clk_disable(iram_clk);
-	} else
-#endif
-	{
-		dma_free_writecombine(fbi->device, fbi->fix.smem_len,
-				      fbi->screen_base, fbi->fix.smem_start);
-	}
+	dma_free_writecombine(fbi->device, fbi->fix.smem_len,
+			      fbi->screen_base, fbi->fix.smem_start);
 	fbi->screen_base = 0;
 	fbi->fix.smem_start = 0;
 	fbi->fix.smem_len = 0;
@@ -947,6 +873,8 @@ static int mxcfb_probe(struct platform_device *pdev)
 {
 	struct fb_info *fbi;
 	struct mxcfb_info *mxcfbi;
+	struct mxc_fb_platform_data *plat_data = pdev->dev.platform_data;
+	struct resource *res;
 	int ret = 0;
 
 	/*
@@ -968,9 +896,16 @@ static int mxcfb_probe(struct platform_device *pdev)
 		mxcfbi->blank = FB_BLANK_UNBLANK;
 
 		strcpy(fbi->fix.id, "DISP3 BG");
+		g_dp_in_use = true;
 	} else if (pdev->id == 1) {
-		mxcfbi->ipu_ch_irq = IPU_IRQ_DC_SYNC_EOF;
-		mxcfbi->ipu_ch = MEM_DC_SYNC;
+		if (!g_dp_in_use) {
+			mxcfbi->ipu_ch_irq = IPU_IRQ_BG_SYNC_EOF;
+			mxcfbi->ipu_ch = MEM_BG_SYNC;
+		} else {
+			mxcfbi->ipu_ch_irq = IPU_IRQ_DC_SYNC_EOF;
+			mxcfbi->ipu_ch = MEM_DC_SYNC;
+			fbi->var.nonstd = IPU_PIX_FMT_UYVY;
+		}
 		mxcfbi->ipu_di = pdev->id;
 		mxcfbi->blank = FB_BLANK_POWERDOWN;
 
@@ -994,14 +929,25 @@ static int mxcfb_probe(struct platform_device *pdev)
 	ipu_disable_irq(mxcfbi->ipu_ch_irq);
 
 	/* Default Y virtual size is 2x panel size */
-#ifndef CONFIG_FB_MXC_INTERNAL_MEM
 	fbi->var.yres_virtual = fbi->var.yres * 2;
-#endif
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (res) {
+		fbi->fix.smem_len = res->end - res->start + 1;
+		fbi->fix.smem_start = res->start;
+		fbi->screen_base = ioremap(fbi->fix.smem_start, fbi->fix.smem_len);
+	}
 
 	/* Need dummy values until real panel is configured */
 	fbi->var.xres = 240;
 	fbi->var.yres = 320;
 
+	if (plat_data) {
+		mxcfbi->ipu_di_pix_fmt = plat_data->interface_pix_fmt;
+		if (plat_data->mode)
+			fb_videomode_to_var(&fbi->var, plat_data->mode);
+	}
+
 	mxcfb_check_var(&fbi->var, fbi);
 	mxcfb_set_fix(fbi);
 
diff --git a/drivers/video/mxc/mxcfb.c b/drivers/video/mxc/mxcfb.c
index 64e282c..2bef9cd 100644
--- a/drivers/video/mxc/mxcfb.c
+++ b/drivers/video/mxc/mxcfb.c
@@ -211,11 +211,11 @@ static int mxcfb_set_par(struct fb_info *fbi)
 			sig_cfg.Hsync_pol = true;
 		if (fbi->var.sync & FB_SYNC_VERT_HIGH_ACT)
 			sig_cfg.Vsync_pol = true;
-		if (fbi->var.sync & FB_SYNC_CLK_INVERT)
+		if (!(fbi->var.sync & FB_SYNC_CLK_LAT_FALL))
 			sig_cfg.clk_pol = true;
 		if (fbi->var.sync & FB_SYNC_DATA_INVERT)
 			sig_cfg.data_pol = true;
-		if (fbi->var.sync & FB_SYNC_OE_ACT_HIGH)
+		if (!(fbi->var.sync & FB_SYNC_OE_LOW_ACT))
 			sig_cfg.enable_pol = true;
 		if (fbi->var.sync & FB_SYNC_CLK_IDLE_EN)
 			sig_cfg.clkidle_en = true;
diff --git a/drivers/video/mxc/mxcfb_claa_wvga.c b/drivers/video/mxc/mxcfb_claa_wvga.c
index a9fd00b..a88dffa 100644
--- a/drivers/video/mxc/mxcfb_claa_wvga.c
+++ b/drivers/video/mxc/mxcfb_claa_wvga.c
@@ -49,7 +49,7 @@ static struct fb_videomode video_modes[] = {
 	{
 	 /* 800x480 @ 55 Hz , pixel clk @ 25MHz */
 	 "CLAA-WVGA", 55, 800, 480, 40000, 80, 0, 10, 0, 20, 10,
-	 FB_SYNC_OE_ACT_HIGH,
+	 FB_SYNC_CLK_LAT_FALL,
 	 FB_VMODE_NONINTERLACED,
 	 0,},
 };
diff --git a/drivers/video/mxc/mxcfb_epson_vga.c b/drivers/video/mxc/mxcfb_epson_vga.c
index 9424d34..3e9d62b 100644
--- a/drivers/video/mxc/mxcfb_epson_vga.c
+++ b/drivers/video/mxc/mxcfb_epson_vga.c
@@ -55,7 +55,7 @@ static struct fb_videomode video_modes[] = {
 	{
 	 /* 480x640 @ 60 Hz */
 	 "Epson-VGA", 60, 480, 640, 41701, 60, 41, 10, 5, 20, 10,
-	 FB_SYNC_CLK_INVERT | FB_SYNC_OE_ACT_HIGH,
+	 0,
 	 FB_VMODE_NONINTERLACED,
 	 0,},
 };
diff --git a/drivers/video/mxc/mxcfb_modedb.c b/drivers/video/mxc/mxcfb_modedb.c
index 5fd4602..2f0c034 100644
--- a/drivers/video/mxc/mxcfb_modedb.c
+++ b/drivers/video/mxc/mxcfb_modedb.c
@@ -19,26 +19,26 @@ struct fb_videomode mxcfb_modedb[] = {
 	 /* 240x320 @ 60 Hz */
 	 "Sharp-QVGA", 60, 240, 320, 185925, 9, 16, 7, 9, 1, 1,
 	 FB_SYNC_HOR_HIGH_ACT | FB_SYNC_SHARP_MODE |
-	 FB_SYNC_CLK_INVERT | FB_SYNC_DATA_INVERT | FB_SYNC_CLK_IDLE_EN,
+	 FB_SYNC_DATA_INVERT | FB_SYNC_CLK_IDLE_EN,
 	 FB_VMODE_NONINTERLACED,
 	 0,},
 	{
 	 /* 240x33 @ 60 Hz */
 	 "Sharp-CLI", 60, 240, 33, 185925, 9, 16, 7, 9 + 287, 1, 1,
 	 FB_SYNC_HOR_HIGH_ACT | FB_SYNC_SHARP_MODE |
-	 FB_SYNC_CLK_INVERT | FB_SYNC_DATA_INVERT | FB_SYNC_CLK_IDLE_EN,
+	 FB_SYNC_DATA_INVERT | FB_SYNC_CLK_IDLE_EN,
 	 FB_VMODE_NONINTERLACED,
 	 0,},
 	{
 	 /* 640x480 @ 60 Hz */
 	 "NEC-VGA", 60, 640, 480, 38255, 144, 0, 34, 40, 1, 1,
-	 FB_SYNC_VERT_HIGH_ACT | FB_SYNC_OE_ACT_HIGH,
+	 FB_SYNC_VERT_HIGH_ACT,
 	 FB_VMODE_NONINTERLACED,
 	 0,},
 	{
 	 /* 640x480 @ 60 Hz */
 	 "CPT-VGA", 60, 640, 480, 39683, 45, 114, 33, 11, 1, 1,
-	 FB_SYNC_OE_ACT_HIGH,
+	 0,
 	 FB_VMODE_NONINTERLACED,
 	 0,},
 	{
diff --git a/drivers/video/mxc/tve.c b/drivers/video/mxc/tve.c
index 78d011e..9058801 100644
--- a/drivers/video/mxc/tve.c
+++ b/drivers/video/mxc/tve.c
@@ -75,8 +75,7 @@ static struct fb_videomode video_modes[] = {
 	 121, 16,
 	 17, 5,
 	 1, 1,
-	 FB_SYNC_HOR_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT | FB_SYNC_OE_ACT_HIGH |
-	 FB_SYNC_EXT,
+	 FB_SYNC_HOR_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT | FB_SYNC_EXT,
 	 FB_VMODE_INTERLACED,
 	 0,},
 	{
@@ -85,8 +84,7 @@ static struct fb_videomode video_modes[] = {
 	 131, 12,
 	 21, 3,
 	 1, 1,
-	 FB_SYNC_HOR_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT | FB_SYNC_OE_ACT_HIGH |
-	 FB_SYNC_EXT,
+	 FB_SYNC_HOR_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT | FB_SYNC_EXT,
 	 FB_VMODE_INTERLACED | FB_VMODE_ODD_FLD_FIRST,
 	 0,},
 };
diff --git a/include/linux/mxcfb.h b/include/linux/mxcfb.h
index 259ec8b..c7bc6bc 100644
--- a/include/linux/mxcfb.h
+++ b/include/linux/mxcfb.h
@@ -23,8 +23,8 @@
 
 #include <linux/fb.h>
 
-#define FB_SYNC_OE_ACT_HIGH	0x80000000
-#define FB_SYNC_CLK_INVERT	0x40000000
+#define FB_SYNC_OE_LOW_ACT	0x80000000
+#define FB_SYNC_CLK_LAT_FALL	0x40000000
 #define FB_SYNC_DATA_INVERT	0x20000000
 #define FB_SYNC_CLK_IDLE_EN	0x10000000
 #define FB_SYNC_SHARP_MODE	0x08000000
-- 
1.5.4.4

