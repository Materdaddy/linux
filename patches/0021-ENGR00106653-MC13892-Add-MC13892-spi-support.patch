From 500562c74dca49fa8c8f3bf86b4a513af2b924c4 Mon Sep 17 00:00:00 2001
From: Nancy Chen <Nancy.Chen@freescale.com>
Date: Thu, 12 Feb 2009 15:37:38 -0600
Subject: [PATCH] ENGR00106653 MC13892: Add MC13892 spi support

Move the changes for MC13892 spi support to the mainline

Signed-off-by: Nancy Chen <Nancy.Chen@freescale.com>
---
 arch/arm/configs/imx37_3stack_defconfig |    2 +-
 arch/arm/configs/imx51_3stack_defconfig |    2 +
 drivers/mxc/pmic/Kconfig                |   10 +++-
 drivers/mxc/pmic/core/Makefile          |   12 +++-
 drivers/mxc/pmic/core/mc13783.c         |    2 +-
 drivers/mxc/pmic/core/mc13892.c         |  108 ++++++++++++++++++++++++++++---
 drivers/mxc/pmic/core/pmic_common.c     |   98 ++++++++++++++++++++++++++++
 drivers/mxc/pmic/core/pmic_core_i2c.c   |   73 ++++-----------------
 drivers/mxc/pmic/core/pmic_core_spi.c   |   90 ++++++++-----------------
 9 files changed, 260 insertions(+), 137 deletions(-)

diff --git a/arch/arm/configs/imx37_3stack_defconfig b/arch/arm/configs/imx37_3stack_defconfig
index 56f4f35..999e1d9 100644
--- a/arch/arm/configs/imx37_3stack_defconfig
+++ b/arch/arm/configs/imx37_3stack_defconfig
@@ -1434,7 +1434,7 @@ CONFIG_MXC_IPU_V3=y
 CONFIG_MXC_PMIC=y
 # CONFIG_MXC_PMIC_MC13783 is not set
 CONFIG_MXC_PMIC_MC13892=y
-# CONFIG_MXC_PMIC_MC9SDZ60 is not set
+CONFIG_MXC_PMIC_I2C=y
 # CONFIG_MXC_PMIC_CHARDEV is not set
 
 #
diff --git a/arch/arm/configs/imx51_3stack_defconfig b/arch/arm/configs/imx51_3stack_defconfig
index 5b827cc..ae86d7f 100644
--- a/arch/arm/configs/imx51_3stack_defconfig
+++ b/arch/arm/configs/imx51_3stack_defconfig
@@ -1464,6 +1464,8 @@ CONFIG_MXC_IPU_V3=y
 CONFIG_MXC_PMIC=y
 # CONFIG_MXC_PMIC_MC13783 is not set
 CONFIG_MXC_PMIC_MC13892=y
+CONFIG_MXC_PMIC_I2C=y
+CONFIG_MXC_PMIC_SPI=y
 # CONFIG_MXC_PMIC_MC34704 is not set
 # CONFIG_MXC_PMIC_CHARDEV is not set
 
diff --git a/drivers/mxc/pmic/Kconfig b/drivers/mxc/pmic/Kconfig
index a17761c..1332e26 100644
--- a/drivers/mxc/pmic/Kconfig
+++ b/drivers/mxc/pmic/Kconfig
@@ -17,12 +17,20 @@ config MXC_PMIC_MC13783
 
 config MXC_PMIC_MC13892
 	tristate "MC13892 PMIC"
-	depends on ARCH_MXC && I2C
+	depends on ARCH_MXC && (I2C || SPI)
 	select MXC_PMIC
 	---help---
 	  This is the MXC MC13892(PMIC) support. It include
 	  ADC, Battery, Connectivity, Light, Power and RTC.
 
+config MXC_PMIC_I2C
+  	bool "Support PMIC I2C Interface"
+	depends on MXC_PMIC_MC13892 && I2C
+
+config MXC_PMIC_SPI
+  	bool "Support PMIC SPI Interface"
+	depends on (MXC_PMIC_MC13892 || MXC_PMIC_MC13783) && SPI
+
 config MXC_PMIC_MC34704
 	tristate "MC34704 PMIC"
 	depends on ARCH_MXC && I2C
diff --git a/drivers/mxc/pmic/core/Makefile b/drivers/mxc/pmic/core/Makefile
index a6c47ff..e746702 100644
--- a/drivers/mxc/pmic/core/Makefile
+++ b/drivers/mxc/pmic/core/Makefile
@@ -2,10 +2,18 @@
 # Makefile for the PMIC core drivers.
 #
 obj-$(CONFIG_MXC_PMIC_MC13783) += pmic_mc13783_mod.o
-pmic_mc13783_mod-objs := pmic_external.o pmic_event.o pmic_core_spi.o mc13783.o
+pmic_mc13783_mod-objs := pmic_external.o pmic_event.o pmic_common.o pmic_core_spi.o mc13783.o
 
 obj-$(CONFIG_MXC_PMIC_MC13892) += pmic_mc13892_mod.o
-pmic_mc13892_mod-objs := pmic_external.o pmic_event.o pmic_core_i2c.o mc13892.o
+pmic_mc13892_mod-objs := pmic_external.o pmic_event.o pmic_common.o mc13892.o
+
+ifneq ($(CONFIG_MXC_PMIC_SPI),)
+pmic_mc13892_mod-objs += pmic_core_spi.o
+endif
+
+ifneq ($(CONFIG_MXC_PMIC_I2C),)
+pmic_mc13892_mod-objs += pmic_core_i2c.o
+endif
 
 obj-$(CONFIG_MXC_PMIC_MC34704) += pmic_mc34704_mod.o
 pmic_mc34704_mod-objs := pmic_external.o pmic_event.o mc34704.o
diff --git a/drivers/mxc/pmic/core/mc13783.c b/drivers/mxc/pmic/core/mc13783.c
index dbd904d..77288c4 100644
--- a/drivers/mxc/pmic/core/mc13783.c
+++ b/drivers/mxc/pmic/core/mc13783.c
@@ -47,7 +47,7 @@
 
 static unsigned int events_enabled0 = 0;
 static unsigned int events_enabled1 = 0;
-static struct mxc_pmic pmic_drv_data;
+struct mxc_pmic pmic_drv_data;
 
 /*!
  * This function is called to read a register on PMIC.
diff --git a/drivers/mxc/pmic/core/mc13892.c b/drivers/mxc/pmic/core/mc13892.c
index 44ae3de..63015cf 100644
--- a/drivers/mxc/pmic/core/mc13892.c
+++ b/drivers/mxc/pmic/core/mc13892.c
@@ -42,6 +42,18 @@
  * Defines
  */
 #define MC13892_I2C_RETRY_TIMES 10
+#define MXC_PMIC_FRAME_MASK		0x00FFFFFF
+#define MXC_PMIC_MAX_REG_NUM		0x3F
+#define MXC_PMIC_REG_NUM_SHIFT		0x19
+#define MXC_PMIC_WRITE_BIT_SHIFT		31
+
+static unsigned int events_enabled0;
+static unsigned int events_enabled1;
+static struct mxc_pmic pmic_drv_data;
+#ifndef CONFIG_MXC_PMIC_I2C
+struct i2c_client *mc13892_client;
+#endif
+
 int pmic_i2c_24bit_read(struct i2c_client *client, unsigned int reg_num,
 			unsigned int *value)
 {
@@ -89,21 +101,71 @@ int pmic_i2c_24bit_write(struct i2c_client *client,
 
 int pmic_read(int reg_num, unsigned int *reg_val)
 {
-	if (mc13892_client == NULL)
-		return PMIC_ERROR;
+	unsigned int frame = 0;
+	int ret = 0;
 
-	if (pmic_i2c_24bit_read(mc13892_client, reg_num, reg_val) == -1)
-		return PMIC_ERROR;
+	if (pmic_drv_data.spi != NULL) {
+		if (reg_num > MXC_PMIC_MAX_REG_NUM)
+			return PMIC_ERROR;
+
+		frame |= reg_num << MXC_PMIC_REG_NUM_SHIFT;
+
+		ret = spi_rw(pmic_drv_data.spi, (u8 *) &frame, 1);
+
+		*reg_val = frame & MXC_PMIC_FRAME_MASK;
+	} else {
+		if (mc13892_client == NULL)
+			return PMIC_ERROR;
+
+		if (pmic_i2c_24bit_read(mc13892_client, reg_num, reg_val) == -1)
+			return PMIC_ERROR;
+	}
 
 	return PMIC_SUCCESS;
 }
 
 int pmic_write(int reg_num, const unsigned int reg_val)
 {
-	if (mc13892_client == NULL)
-		return PMIC_ERROR;
+	unsigned int frame = 0;
+	int ret = 0;
+
+	if (pmic_drv_data.spi != NULL) {
+		if (reg_num > MXC_PMIC_MAX_REG_NUM)
+			return PMIC_ERROR;
+
+		frame |= (1 << MXC_PMIC_WRITE_BIT_SHIFT);
+
+		frame |= reg_num << MXC_PMIC_REG_NUM_SHIFT;
+
+		frame |= reg_val & MXC_PMIC_FRAME_MASK;
+
+		ret = spi_rw(pmic_drv_data.spi, (u8 *) &frame, 1);
+
+		return ret;
+	} else {
+		if (mc13892_client == NULL)
+			return PMIC_ERROR;
 
-	return pmic_i2c_24bit_write(mc13892_client, reg_num, reg_val);
+		return pmic_i2c_24bit_write(mc13892_client, reg_num, reg_val);
+	}
+}
+
+/*!
+ * This function initializes the SPI device parameters for this PMIC.
+ *
+ * @param    spi	the SPI slave device(PMIC)
+ *
+ * @return   None
+ */
+int pmic_spi_setup(struct spi_device *spi)
+{
+	/* Setup the SPI slave i.e.PMIC */
+	pmic_drv_data.spi = spi;
+
+	spi->mode = SPI_MODE_0 | SPI_CS_HIGH;
+	spi->bits_per_word = 32;
+
+	return spi_setup(spi);
 }
 
 int pmic_init_registers(void)
@@ -117,12 +179,10 @@ int pmic_init_registers(void)
 		CHECK_ERROR(pmic_write(REG_CHARGE, 0xB40003));
 
 	pm_power_off = mc13892_power_off;
+
 	return PMIC_SUCCESS;
 }
 
-static unsigned int events_enabled0;
-static unsigned int events_enabled1;
-
 unsigned int pmic_get_active_events(unsigned int *active_events)
 {
 	unsigned int count = 0;
@@ -219,6 +279,34 @@ int pmic_event_mask(type_event event)
 	return ret;
 }
 
+/*!
+ * This function returns the PMIC version in system.
+ *
+ * @param 	ver	pointer to the pmic_version_t structure
+ *
+ * @return       This function returns PMIC version.
+ */
+void pmic_get_revision(pmic_version_t *ver)
+{
+	int rev_id = 0;
+	int rev1 = 0;
+	int rev2 = 0;
+	int finid = 0;
+	int icid = 0;
+
+	ver->id = PMIC_MC13892;
+	pmic_read(REG_IDENTIFICATION, &rev_id);
+
+	rev1 = (rev_id & 0x018) >> 3;
+	rev2 = (rev_id & 0x007);
+	icid = (rev_id & 0x01C0) >> 6;
+	finid = (rev_id & 0x01E00) >> 9;
+
+	ver->revision = ((rev1 * 10) + rev2);
+	printk(KERN_INFO "mc13892 Rev %d.%d FinVer %x detected\n", rev1,
+	       rev2, finid);
+}
+
 void mc13892_power_off(void)
 {
 	unsigned int value;
diff --git a/drivers/mxc/pmic/core/pmic_common.c b/drivers/mxc/pmic/core/pmic_common.c
new file mode 100644
index 0000000..55f34b2
--- /dev/null
+++ b/drivers/mxc/pmic/core/pmic_common.c
@@ -0,0 +1,98 @@
+/*
+ * Copyright 2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ */
+
+/*
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+/*!
+ * @file pmic_common.c
+ * @brief This is the common file for the PMIC Core/Protocol driver.
+ *
+ * @ingroup PMIC_CORE
+ */
+
+/*
+ * Includes
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/pmic_external.h>
+#include <linux/pmic_status.h>
+
+#include <asm/uaccess.h>
+
+#include "pmic.h"
+
+/*
+ * Global variables
+ */
+pmic_version_t mxc_pmic_version;
+unsigned int active_events[MAX_ACTIVE_EVENTS];
+struct workqueue_struct *pmic_event_wq;
+
+void pmic_bh_handler(struct work_struct *work);
+/*!
+ * Bottom half handler of PMIC event handling.
+ */
+DECLARE_WORK(pmic_ws, pmic_bh_handler);
+
+/*!
+ * This function is the bottom half handler of the PMIC interrupt.
+ * It checks for active events and launches callback for the
+ * active events.
+ */
+void pmic_bh_handler(struct work_struct *work)
+{
+	unsigned int loop;
+	unsigned int count = 0;
+
+	count = pmic_get_active_events(active_events);
+	pr_debug("active events number %d\n", count);
+
+	for (loop = 0; loop < count; loop++)
+		pmic_event_callback(active_events[loop]);
+
+	return;
+}
+
+/*!
+ * This function is called when pmic interrupt occurs on the processor.
+ * It is the interrupt handler for the pmic module.
+ *
+ * @param        irq        the irq number
+ * @param        dev_id     the pointer on the device
+ *
+ * @return       The function returns IRQ_HANDLED when handled.
+ */
+irqreturn_t pmic_irq_handler(int irq, void *dev_id)
+{
+	/* prepare a task */
+	queue_work(pmic_event_wq, &pmic_ws);
+
+	return IRQ_HANDLED;
+}
+
+/*!
+ * This function is used to determine the PMIC type and its revision.
+ *
+ * @return      Returns the PMIC type and its revision.
+ */
+
+pmic_version_t pmic_get_version(void)
+{
+	return mxc_pmic_version;
+}
+EXPORT_SYMBOL(pmic_get_version);
diff --git a/drivers/mxc/pmic/core/pmic_core_i2c.c b/drivers/mxc/pmic/core/pmic_core_i2c.c
index 244c9ba..750cf49 100644
--- a/drivers/mxc/pmic/core/pmic_core_i2c.c
+++ b/drivers/mxc/pmic/core/pmic_core_i2c.c
@@ -51,11 +51,11 @@
 /*
  * Global variables
  */
-static pmic_version_t mxc_pmic_version;
-unsigned int active_events[MAX_ACTIVE_EVENTS];
 struct i2c_client *mc13892_client;
 
-static struct workqueue_struct *pmic_event_wq;
+extern struct workqueue_struct *pmic_event_wq;
+extern pmic_version_t mxc_pmic_version;
+extern irqreturn_t pmic_irq_handler(int irq, void *dev_id);
 
 /*
  * Platform device structure for PMIC client drivers
@@ -118,56 +118,6 @@ static void pmic_pdev_unregister(void)
 	platform_device_unregister(&light_ldm);
 }
 
-void pmic_bh_handler(struct work_struct *work);
-
-/*!
- * Bottom half handler of PMIC event handling.
- */
-DECLARE_WORK(pmic_ws, pmic_bh_handler);
-
-/*!
- * This function is called when pmic interrupt occurs on the processor.
- * It is the interrupt handler for the pmic module.
- *
- * @param        irq        the irq number
- * @param        dev_id     the pointer on the device
- *
- * @return       The function returns IRQ_HANDLED when handled.
- */
-static irqreturn_t pmic_irq_handler(int irq, void *dev_id)
-{
-	/* prepare a task */
-	queue_work(pmic_event_wq, &pmic_ws);
-
-	return IRQ_HANDLED;
-}
-
-/*!
- * This function is the bottom half handler of the PMIC interrupt.
- * It checks for active events and launches callback for the
- * active events.
- */
-void pmic_bh_handler(struct work_struct *work)
-{
-	unsigned int loop;
-	unsigned int count = 0;
-
-	count = pmic_get_active_events(active_events);
-	pr_debug("active events number %d\n", count);
-
-	for (loop = 0; loop < count; loop++)
-		pmic_event_callback(active_events[loop]);
-
-	return;
-}
-
-pmic_version_t pmic_get_version(void)
-{
-	return mxc_pmic_version;
-}
-
-EXPORT_SYMBOL(pmic_get_version);
-
 static int __devinit is_chip_onboard(struct i2c_client *client)
 {
 	unsigned int ret = 0;
@@ -283,6 +233,12 @@ static int __devinit pmic_probe(struct i2c_client *client,
 	if (ret != PMIC_SUCCESS)
 		return PMIC_ERROR;
 
+	pmic_event_wq = create_workqueue("mc13892");
+	if (!pmic_event_wq) {
+		pr_err("mc13892 pmic driver init: fail to create work queue");
+		return -EFAULT;
+	}
+
 	/* Set and install PMIC IRQ handler */
 	pmic_irq = (int)(client->irq);
 	if (pmic_irq == 0)
@@ -320,6 +276,9 @@ static int pmic_remove(struct i2c_client *client)
 {
 	int pmic_irq = (int)(client->dev.platform_data);
 
+	if (pmic_event_wq)
+		destroy_workqueue(pmic_event_wq);
+
 	free_irq(pmic_irq, 0);
 	pmic_pdev_unregister();
 	return 0;
@@ -356,19 +315,11 @@ static struct i2c_driver pmic_driver = {
 
 static int __init pmic_init(void)
 {
-	pmic_event_wq = create_workqueue(pmic_driver.driver.name);
-	if (!pmic_event_wq) {
-		pr_err("mc13892 pmic driver init: fail to create work queue");
-		return -EFAULT;
-	}
 	return i2c_add_driver(&pmic_driver);
 }
 
 static void __exit pmic_exit(void)
 {
-	if (pmic_event_wq)
-		destroy_workqueue(pmic_event_wq);
-
 	i2c_del_driver(&pmic_driver);
 }
 
diff --git a/drivers/mxc/pmic/core/pmic_core_spi.c b/drivers/mxc/pmic/core/pmic_core_spi.c
index 8439b35..dd986c0 100644
--- a/drivers/mxc/pmic/core/pmic_core_spi.c
+++ b/drivers/mxc/pmic/core/pmic_core_spi.c
@@ -40,17 +40,10 @@
 #include "pmic.h"
 
 /*
- * Global variables
- */
-static pmic_version_t mxc_pmic_version;
-unsigned int active_events[MAX_ACTIVE_EVENTS];
-
-/*
  * Static functions
  */
 static void pmic_pdev_register(void);
 static void pmic_pdev_unregister(void);
-void pmic_bh_handler(struct work_struct *work);
 
 /*
  * Platform device structure for PMIC client drivers
@@ -75,6 +68,18 @@ static struct platform_device light_ldm = {
 	.name = "pmic_light",
 	.id = 1,
 };
+static struct platform_device rleds_ldm = {
+	.name = "pmic_leds",
+	.id = 'r',
+};
+static struct platform_device gleds_ldm = {
+	.name = "pmic_leds",
+	.id = 'g',
+};
+static struct platform_device bleds_ldm = {
+	.name = "pmic_leds",
+	.id = 'b',
+};
 
 /*
  * External functions
@@ -82,11 +87,9 @@ static struct platform_device light_ldm = {
 extern void pmic_event_list_init(void);
 extern void pmic_event_callback(type_event event);
 extern void gpio_pmic_active(void);
-
-/*!
- * Bottom half handler of PMIC event handling.
- */
-DECLARE_WORK(pmic_ws, pmic_bh_handler);
+extern irqreturn_t pmic_irq_handler(int irq, void *dev_id);
+extern pmic_version_t mxc_pmic_version;
+extern struct workqueue_struct *pmic_event_wq;
 
 /*!
  * This function registers platform device structures for
@@ -99,6 +102,9 @@ static void pmic_pdev_register(void)
 	platform_device_register(&rtc_ldm);
 	platform_device_register(&power_ldm);
 	platform_device_register(&light_ldm);
+	platform_device_register(&rleds_ldm);
+	platform_device_register(&gleds_ldm);
+	platform_device_register(&bleds_ldm);
 }
 
 /*!
@@ -115,55 +121,6 @@ static void pmic_pdev_unregister(void)
 }
 
 /*!
- * This function is called when pmic interrupt occurs on the processor.
- * It is the interrupt handler for the pmic module.
- *
- * @param        irq        the irq number
- * @param        dev_id     the pointer on the device
- *
- * @return       The function returns IRQ_HANDLED when handled.
- */
-static irqreturn_t pmic_irq_handler(int irq, void *dev_id)
-{
-	/* prepare a task */
-	schedule_work(&pmic_ws);
-
-	return IRQ_HANDLED;
-}
-
-/*!
- * This function is the bottom half handler of the PMIC interrupt.
- * It checks for active events and launches callback for the
- * active events.
- */
-void pmic_bh_handler(struct work_struct *work)
-{
-	unsigned int loop;
-	unsigned int count = 0;
-
-	count = pmic_get_active_events(active_events);
-
-	for (loop = 0; loop < count; loop++) {
-		pmic_event_callback(active_events[loop]);
-	}
-
-	return;
-}
-
-/*!
- * This function is used to determine the PMIC type and its revision.
- *
- * @return      Returns the PMIC type and its revision.
- */
-
-pmic_version_t pmic_get_version(void)
-{
-	return mxc_pmic_version;
-}
-
-EXPORT_SYMBOL(pmic_get_version);
-
-/*!
  * This function puts the SPI slave device in low-power mode/state.
  *
  * @param	spi	the SPI slave device
@@ -188,6 +145,8 @@ static int pmic_resume(struct spi_device *spi)
 	return PMIC_SUCCESS;
 }
 
+static struct spi_driver pmic_driver;
+
 /*!
  * This function is called whenever the SPI slave device is detected.
  *
@@ -248,6 +207,12 @@ static int __devinit pmic_probe(struct spi_device *spi)
 		return PMIC_ERROR;
 	}
 
+	pmic_event_wq = create_workqueue("pmic_spi");
+	if (!pmic_event_wq) {
+		pr_err("mc13892 pmic driver init: fail to create work queue");
+		return -EFAULT;
+	}
+
 	/* Set and install PMIC IRQ handler */
 	set_irq_type(spi->irq, IRQF_TRIGGER_RISING);
 	ret = request_irq(spi->irq, pmic_irq_handler, 0, "PMIC_IRQ", 0);
@@ -280,6 +245,9 @@ static int __devinit pmic_probe(struct spi_device *spi)
  */
 static int __devexit pmic_remove(struct spi_device *spi)
 {
+	if (pmic_event_wq)
+		destroy_workqueue(pmic_event_wq);
+
 	free_irq(spi->irq, 0);
 
 	pmic_pdev_unregister();
-- 
1.5.4.4

