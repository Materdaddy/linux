From f04f02bed595ff6d517621de1098ff69042d0b3e Mon Sep 17 00:00:00 2001
From: Liu Ying <b17645@freescale.com>
Date: Tue, 17 Mar 2009 11:37:45 +0800
Subject: [PATCH] ENGR00109658 V4l2 capture:Add seperate VF and ENC rotation ioctls

Add seperate VF and ENC rotation controls for IPUv1 and IPUv3.
This prevents capture task and preview task from impacting on each other
when doing rotation.

Signed-off-by: Liu Ying <b17645@freescale.com>
---
 drivers/media/video/mxc/capture/ipu_prp_vf_adc.c   |   14 +++++-----
 drivers/media/video/mxc/capture/ipu_prp_vf_sdc.c   |   14 +++++-----
 .../media/video/mxc/capture/ipu_prp_vf_sdc_bg.c    |    6 ++--
 drivers/media/video/mxc/capture/mxc_v4l2_capture.c |   24 +++++++++++++------
 drivers/media/video/mxc/capture/mxc_v4l2_capture.h |    3 +-
 include/linux/mxc_v4l2.h                           |    5 ++++
 6 files changed, 40 insertions(+), 26 deletions(-)

diff --git a/drivers/media/video/mxc/capture/ipu_prp_vf_adc.c b/drivers/media/video/mxc/capture/ipu_prp_vf_adc.c
index 131ada9..a7ac09a 100644
--- a/drivers/media/video/mxc/capture/ipu_prp_vf_adc.c
+++ b/drivers/media/video/mxc/capture/ipu_prp_vf_adc.c
@@ -75,7 +75,7 @@ static int prpvf_start(void *private)
 
 	vf.csi_prp_vf_adc.out_top = cam->win.w.top;
 
-	if (cam->rotation >= IPU_ROTATE_90_RIGHT) {
+	if (cam->vf_rotation >= IPU_ROTATE_90_RIGHT) {
 		vf.csi_prp_vf_adc.out_width = cam->win.w.height;
 		vf.csi_prp_vf_adc.out_height = cam->win.w.width;
 
@@ -193,7 +193,7 @@ static int prpvf_start(void *private)
 					      vf.csi_prp_vf_mem.out_width,
 					      vf.csi_prp_vf_mem.out_height,
 					      vf.csi_prp_vf_mem.out_width,
-					      cam->rotation, cam->vf_bufs[0],
+					      cam->vf_rotation, cam->vf_bufs[0],
 					      cam->vf_bufs[1], 0, 0);
 		if (err != 0) {
 			printk(KERN_ERR "prpvf_start: Error "
@@ -273,7 +273,7 @@ static int prpvf_start(void *private)
 		ipu_select_buffer(MEM_ROT_VF_MEM, IPU_OUTPUT_BUFFER, 1);
 	}
 #ifndef CONFIG_MXC_IPU_PRP_VF_SDC
-	else if (cam->rotation == IPU_ROTATE_NONE) {
+	else if (cam->vf_rotation == IPU_ROTATE_NONE) {
 		vf.csi_prp_vf_adc.out_pixel_fmt = IPU_PIX_FMT_BGR32;
 		err = ipu_init_channel(CSI_PRP_VF_ADC, &vf);
 		if (err != 0) {
@@ -352,7 +352,7 @@ static int prpvf_start(void *private)
 					      vf.csi_prp_vf_mem.out_width,
 					      vf.csi_prp_vf_mem.out_height,
 					      vf.csi_prp_vf_mem.out_width,
-					      cam->rotation,
+					      cam->vf_rotation,
 					      cam->vf_bufs[0], cam->vf_bufs[1],
 					      0, 0);
 		if (err != 0) {
@@ -415,7 +415,7 @@ static int prpvf_start(void *private)
       out_1:
 	ipu_uninit_channel(ADC_SYS2);
       out_2:
-	if (cam->rotation >= IPU_ROTATE_90_RIGHT) {
+	if (cam->vf_rotation >= IPU_ROTATE_90_RIGHT) {
 		ipu_uninit_channel(MEM_ROT_VF_MEM);
 	}
       out_3:
@@ -463,7 +463,7 @@ static int prpvf_stop(void *private)
 	if (cam->overlay_active == false)
 		return 0;
 
-	if (cam->rotation >= IPU_ROTATE_90_RIGHT) {
+	if (cam->vf_rotation >= IPU_ROTATE_90_RIGHT) {
 		ipu_unlink_channels(CSI_PRP_VF_MEM, MEM_ROT_VF_MEM);
 		ipu_unlink_channels(MEM_ROT_VF_MEM, ADC_SYS2);
 
@@ -478,7 +478,7 @@ static int prpvf_stop(void *private)
 		ipu_csi_enable_mclk_if(CSI_MCLK_VF, cam->csi, false, false);
 	}
 #ifndef CONFIG_MXC_IPU_PRP_VF_SDC
-	else if (cam->rotation == IPU_ROTATE_NONE) {
+	else if (cam->vf_rotation == IPU_ROTATE_NONE) {
 		ipu_disable_channel(CSI_PRP_VF_ADC, false);
 		ipu_uninit_channel(CSI_PRP_VF_ADC);
 		ipu_csi_enable_mclk_if(CSI_MCLK_VF, cam->csi, false, false);
diff --git a/drivers/media/video/mxc/capture/ipu_prp_vf_sdc.c b/drivers/media/video/mxc/capture/ipu_prp_vf_sdc.c
index 6c2596f..c096591 100644
--- a/drivers/media/video/mxc/capture/ipu_prp_vf_sdc.c
+++ b/drivers/media/video/mxc/capture/ipu_prp_vf_sdc.c
@@ -59,7 +59,7 @@ static int prpvf_start(void *private)
 	vf.csi_prp_vf_mem.out_width = cam->win.w.width;
 	vf.csi_prp_vf_mem.out_height = cam->win.w.height;
 	vf.csi_prp_vf_mem.csi = cam->csi;
-	if (cam->rotation >= IPU_ROTATE_90_RIGHT) {
+	if (cam->vf_rotation >= IPU_ROTATE_90_RIGHT) {
 		vf.csi_prp_vf_mem.out_width = cam->win.w.height;
 		vf.csi_prp_vf_mem.out_height = cam->win.w.width;
 	}
@@ -108,7 +108,7 @@ static int prpvf_start(void *private)
 	}
 	pr_debug("vf_bufs %x %x\n", cam->vf_bufs[0], cam->vf_bufs[1]);
 
-	if (cam->rotation >= IPU_ROTATE_90_RIGHT) {
+	if (cam->vf_rotation >= IPU_ROTATE_90_RIGHT) {
 		err = ipu_init_channel_buffer(CSI_PRP_VF_MEM, IPU_OUTPUT_BUFFER,
 					      format,
 					      vf.csi_prp_vf_mem.out_width,
@@ -178,7 +178,7 @@ static int prpvf_start(void *private)
 					      vf.csi_prp_vf_mem.out_width,
 					      vf.csi_prp_vf_mem.out_height,
 					      vf.csi_prp_vf_mem.out_width,
-					      cam->rotation, cam->vf_bufs[0],
+					      cam->vf_rotation, cam->vf_bufs[0],
 					      cam->vf_bufs[1], 0, 0);
 		if (err != 0) {
 			printk(KERN_ERR "Error MEM_ROT_VF_MEM input buffer\n");
@@ -247,7 +247,7 @@ static int prpvf_start(void *private)
 		err = ipu_init_channel_buffer(CSI_PRP_VF_MEM, IPU_OUTPUT_BUFFER,
 					      format, cam->win.w.width,
 					      cam->win.w.height,
-					      cam->win.w.width, cam->rotation,
+					      cam->win.w.width, cam->vf_rotation,
 					      cam->vf_bufs[0], cam->vf_bufs[1],
 					      0, 0);
 		if (err != 0) {
@@ -294,7 +294,7 @@ static int prpvf_start(void *private)
       out_1:
 	ipu_uninit_channel(MEM_FG_SYNC);
       out_2:
-	if (cam->rotation >= IPU_ROTATE_90_RIGHT) {
+	if (cam->vf_rotation >= IPU_ROTATE_90_RIGHT) {
 		ipu_uninit_channel(MEM_ROT_VF_MEM);
 	}
       out_3:
@@ -347,7 +347,7 @@ static int prpvf_stop(void *private)
 
 	ipu_disp_set_window_pos(MEM_FG_SYNC, 0, 0);
 
-	if (cam->rotation >= IPU_ROTATE_90_RIGHT) {
+	if (cam->vf_rotation >= IPU_ROTATE_90_RIGHT) {
 		ipu_unlink_channels(CSI_PRP_VF_MEM, MEM_ROT_VF_MEM);
 		ipu_unlink_channels(MEM_ROT_VF_MEM, MEM_FG_SYNC);
 	} else {
@@ -357,7 +357,7 @@ static int prpvf_stop(void *private)
 	ipu_disable_channel(MEM_FG_SYNC, true);
 	ipu_disable_channel(CSI_PRP_VF_MEM, true);
 
-	if (cam->rotation >= IPU_ROTATE_90_RIGHT) {
+	if (cam->vf_rotation >= IPU_ROTATE_90_RIGHT) {
 		ipu_disable_channel(MEM_ROT_VF_MEM, true);
 		ipu_uninit_channel(MEM_ROT_VF_MEM);
 	}
diff --git a/drivers/media/video/mxc/capture/ipu_prp_vf_sdc_bg.c b/drivers/media/video/mxc/capture/ipu_prp_vf_sdc_bg.c
index f23565b..47da7fa 100644
--- a/drivers/media/video/mxc/capture/ipu_prp_vf_sdc_bg.c
+++ b/drivers/media/video/mxc/capture/ipu_prp_vf_sdc_bg.c
@@ -128,7 +128,7 @@ static int prpvf_start(void *private)
 	vf.csi_prp_vf_mem.out_width = cam->win.w.width;
 	vf.csi_prp_vf_mem.out_height = cam->win.w.height;
 	vf.csi_prp_vf_mem.csi = cam->csi;
-	if (cam->rotation >= IPU_ROTATE_90_RIGHT) {
+	if (cam->vf_rotation >= IPU_ROTATE_90_RIGHT) {
 		vf.csi_prp_vf_mem.out_width = cam->win.w.height;
 		vf.csi_prp_vf_mem.out_height = cam->win.w.width;
 	}
@@ -192,14 +192,14 @@ static int prpvf_start(void *private)
 				      format, vf.csi_prp_vf_mem.out_width,
 				      vf.csi_prp_vf_mem.out_height,
 				      vf.csi_prp_vf_mem.out_width,
-				      cam->rotation, cam->vf_bufs[0],
+				      cam->vf_rotation, cam->vf_bufs[0],
 				      cam->vf_bufs[1], 0, 0);
 	if (err != 0) {
 		printk(KERN_ERR "Error MEM_ROT_VF_MEM input buffer\n");
 		goto out_2;
 	}
 
-	if (cam->rotation >= IPU_ROTATE_90_RIGHT) {
+	if (cam->vf_rotation >= IPU_ROTATE_90_RIGHT) {
 		err = ipu_init_channel_buffer(MEM_ROT_VF_MEM, IPU_OUTPUT_BUFFER,
 					      format,
 					      vf.csi_prp_vf_mem.out_height,
diff --git a/drivers/media/video/mxc/capture/mxc_v4l2_capture.c b/drivers/media/video/mxc/capture/mxc_v4l2_capture.c
index 61b521b..4b1f49c 100644
--- a/drivers/media/video/mxc/capture/mxc_v4l2_capture.c
+++ b/drivers/media/video/mxc/capture/mxc_v4l2_capture.c
@@ -841,6 +841,7 @@ static int mxc_v4l2_g_ctrl(cam_data *cam, struct v4l2_control *c)
 static int mxc_v4l2_s_ctrl(cam_data *cam, struct v4l2_control *c)
 {
 	int ret = 0;
+	int tmp_rotation = IPU_ROTATE_NONE;
 
 	pr_debug("In MVC:mxc_v4l2_s_ctrl\n");
 
@@ -876,35 +877,42 @@ static int mxc_v4l2_s_ctrl(cam_data *cam, struct v4l2_control *c)
 		}
 		break;
 	case V4L2_CID_MXC_ROT:
+	case V4L2_CID_MXC_VF_ROT:
 		/* This is done by the IPU */
 		switch (c->value) {
 		case V4L2_MXC_ROTATE_NONE:
-			cam->rotation = IPU_ROTATE_NONE;
+			tmp_rotation = IPU_ROTATE_NONE;
 			break;
 		case V4L2_MXC_ROTATE_VERT_FLIP:
-			cam->rotation = IPU_ROTATE_VERT_FLIP;
+			tmp_rotation = IPU_ROTATE_VERT_FLIP;
 			break;
 		case V4L2_MXC_ROTATE_HORIZ_FLIP:
-			cam->rotation = IPU_ROTATE_HORIZ_FLIP;
+			tmp_rotation = IPU_ROTATE_HORIZ_FLIP;
 			break;
 		case V4L2_MXC_ROTATE_180:
-			cam->rotation = IPU_ROTATE_180;
+			tmp_rotation = IPU_ROTATE_180;
 			break;
 		case V4L2_MXC_ROTATE_90_RIGHT:
-			cam->rotation = IPU_ROTATE_90_RIGHT;
+			tmp_rotation = IPU_ROTATE_90_RIGHT;
 			break;
 		case V4L2_MXC_ROTATE_90_RIGHT_VFLIP:
-			cam->rotation = IPU_ROTATE_90_RIGHT_VFLIP;
+			tmp_rotation = IPU_ROTATE_90_RIGHT_VFLIP;
 			break;
 		case V4L2_MXC_ROTATE_90_RIGHT_HFLIP:
-			cam->rotation = IPU_ROTATE_90_RIGHT_HFLIP;
+			tmp_rotation = IPU_ROTATE_90_RIGHT_HFLIP;
 			break;
 		case V4L2_MXC_ROTATE_90_LEFT:
-			cam->rotation = IPU_ROTATE_90_LEFT;
+			tmp_rotation = IPU_ROTATE_90_LEFT;
 			break;
 		default:
 			ret = -EINVAL;
 		}
+
+		if (c->id == V4L2_CID_MXC_VF_ROT)
+			cam->vf_rotation = tmp_rotation;
+		else
+			cam->rotation = tmp_rotation;
+
 		break;
 	case V4L2_CID_HUE:
 		cam->hue = c->value;
diff --git a/drivers/media/video/mxc/capture/mxc_v4l2_capture.h b/drivers/media/video/mxc/capture/mxc_v4l2_capture.h
index bdb67fc..e94dfe3 100644
--- a/drivers/media/video/mxc/capture/mxc_v4l2_capture.h
+++ b/drivers/media/video/mxc/capture/mxc_v4l2_capture.h
@@ -139,7 +139,8 @@ typedef struct _cam_data {
 
 	/* v4l2 format */
 	struct v4l2_format v2f;
-	int rotation;
+	int rotation;	/* for IPUv1 and IPUv3, this means encoder rotation */
+	int vf_rotation; /* viewfinder rotation only for IPUv1 and IPUv3 */
 	struct v4l2_mxc_offset offset;
 
 	/* V4l2 control bit */
diff --git a/include/linux/mxc_v4l2.h b/include/linux/mxc_v4l2.h
index b897374..a94074e 100644
--- a/include/linux/mxc_v4l2.h
+++ b/include/linux/mxc_v4l2.h
@@ -22,8 +22,13 @@
 #ifndef __ASM_ARCH_MXC_V4L2_H__
 #define __ASM_ARCH_MXC_V4L2_H__
 
+/*
+ * For IPUv1 and IPUv3, V4L2_CID_MXC_ROT means encoder ioctl ID.
+ * And V4L2_CID_MXC_VF_ROT is viewfinder ioctl ID only for IPUv1 and IPUv3.
+ */
 #define V4L2_CID_MXC_ROT		(V4L2_CID_PRIVATE_BASE + 0)
 #define V4L2_CID_MXC_FLASH		(V4L2_CID_PRIVATE_BASE + 1)
+#define V4L2_CID_MXC_VF_ROT		(V4L2_CID_PRIVATE_BASE + 2)
 
 #define V4L2_MXC_ROTATE_NONE			0
 #define V4L2_MXC_ROTATE_VERT_FLIP		1
-- 
1.5.4.4

